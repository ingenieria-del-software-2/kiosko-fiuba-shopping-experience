basePath: /api
definitions:
  dto.CartCreateRequest:
    properties:
      userId:
        type: string
    required:
    - userId
    type: object
  dto.CartItemDTO:
    properties:
      id:
        type: string
      imageUrl:
        type: string
      name:
        type: string
      price:
        type: number
      productId:
        type: string
      quantity:
        type: integer
      subtotal:
        type: number
    type: object
  dto.CartItemRequest:
    properties:
      imageUrl:
        type: string
      name:
        type: string
      price:
        minimum: 0
        type: number
      productId:
        type: string
      quantity:
        type: integer
    required:
    - name
    - productId
    - quantity
    type: object
  dto.CartItemUpdateRequest:
    properties:
      quantity:
        type: integer
    required:
    - quantity
    type: object
  dto.CartResponse:
    properties:
      createdAt:
        type: string
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/dto.CartItemDTO'
        type: array
      subtotal:
        type: number
      totalItems:
        type: integer
      updatedAt:
        type: string
      userId:
        type: string
    type: object
  errors.ErrorResponse:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
host: localhost:8001
info:
  contact:
    email: support@kioskofiuba.com
    name: API Support
  description: This is the Shopping Experience API for the Kiosko FIUBA e-commerce
    platform
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Shopping Experience API
  version: "1.0"
paths:
  /api/carts:
    post:
      consumes:
      - application/json
      description: Create a new shopping cart for a user
      parameters:
      - description: Cart creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CartCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Cart created successfully
          schema:
            $ref: '#/definitions/dto.CartResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Create a new cart
      tags:
      - carts
  /api/carts/{cartId}:
    delete:
      consumes:
      - application/json
      description: Delete a shopping cart by its ID
      parameters:
      - description: Cart ID
        format: uuid
        in: path
        name: cartId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Cart deleted successfully
        "404":
          description: Cart not found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Delete a cart
      tags:
      - carts
    get:
      consumes:
      - application/json
      description: Get details of a shopping cart by its ID
      parameters:
      - description: Cart ID
        format: uuid
        in: path
        name: cartId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Cart retrieved successfully
          schema:
            $ref: '#/definitions/dto.CartResponse'
        "404":
          description: Cart not found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Get a cart by ID
      tags:
      - carts
  /api/carts/{cartId}/items:
    post:
      consumes:
      - application/json
      description: Add a product item to a shopping cart
      parameters:
      - description: Cart ID
        format: uuid
        in: path
        name: cartId
        required: true
        type: string
      - description: Item details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CartItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Item added successfully
          schema:
            $ref: '#/definitions/dto.CartResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Cart not found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Add item to cart
      tags:
      - carts
  /api/carts/{cartId}/items/{itemId}:
    delete:
      consumes:
      - application/json
      description: Remove an item from a shopping cart
      parameters:
      - description: Cart ID
        format: uuid
        in: path
        name: cartId
        required: true
        type: string
      - description: Item ID
        format: uuid
        in: path
        name: itemId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Item removed successfully
        "404":
          description: Cart or item not found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Remove item from cart
      tags:
      - carts
    put:
      consumes:
      - application/json
      description: Update the quantity of an item in a shopping cart
      parameters:
      - description: Cart ID
        format: uuid
        in: path
        name: cartId
        required: true
        type: string
      - description: Item ID
        format: uuid
        in: path
        name: itemId
        required: true
        type: string
      - description: Updated item details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CartItemUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Item updated successfully
          schema:
            $ref: '#/definitions/dto.CartResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Cart or item not found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Update cart item
      tags:
      - carts
schemes:
- http
swagger: "2.0"
