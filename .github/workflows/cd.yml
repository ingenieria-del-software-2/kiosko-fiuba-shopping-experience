name: CD

on: push

env:
  REGION: us-central1
  IMAGE_TAG: ${{ github.sha }}
  REPOSITORY: shopping-experience
  MICROSERVICE_NAME: shopping-experience

jobs:
  build:
    name: Build and push image
    runs-on: ubuntu-latest

    steps:
      # ----- SOURCE -----
      - name: Checkout repo
        uses: actions/checkout@v4

      # ----- GCP Authentication -----
      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          token_format: 'access_token'

      # ----- Set up BuildX and Docker -----
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Google Artifact Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGION }}-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      # ----- Build & Push -----
      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.MICROSERVICE_NAME }}:${{ env.IMAGE_TAG }}
          target: prod
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to GCE VM
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      # ----- COPY COMPOSE FILE -----
      - name: Checkout repo
        uses: actions/checkout@v4
        
      - name: Upload PROD docker compose to GCE VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.GCP_VM_HOST }}
          username: ${{ secrets.GCP_USERNAME }}
          key: ${{ secrets.GCP_SSH_KEY }}
          source: compose.prod.yml
          target: /opt/apps/${{ env.MICROSERVICE_NAME }}

      # ----- REMOTE DEPLOY -----
      - name: SSH & deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.GCP_VM_HOST }}
          username: ${{ secrets.GCP_USERNAME }}
          key: ${{ secrets.GCP_SSH_KEY }}
          script: |
            set -e
            cd /opt/apps/${{ env.MICROSERVICE_NAME }}
            # Construct the same image URI as in the build job
            IMAGE_URI="${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.MICROSERVICE_NAME }}:${{ env.IMAGE_TAG }}"
            echo "IMAGE_URI=$IMAGE_URI" > .env

            docker compose -f compose.prod.yml pull
            docker compose -f compose.prod.yml up -d --remove-orphans